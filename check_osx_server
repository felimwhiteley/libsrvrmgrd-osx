#!/usr/bin/python
# -*- coding: utf-8 -*-
# We require the srvrmgrdIO module to prepare the request and talk to servermgrd
# Also require python plistlib library (apt-get install python-plistlib [in Debian/Ubuntu])
# http://svn.python.org/projects/python/trunk/Lib/plistlib.py
#
#
#    Copyright (C) 2010 Felim Whiteley
#
#    Author: Felim Whiteley <felimwhiteley@gmail.com>
#             http://www.linkedin.com/in/felimwhiteley
#
#    This is free software; you can redistribute it and/or modify it
#    under the terms of the GNU Lesser General Public License as
#    published by the Free Software Foundation; version 3 of
#    the License, or any later version.
#
#    This software is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#    Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public
#    License along with this software; if not, write to the Free
#    Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
#    02110-1301 USA, or see the FSF site: http://www.fsf.org.


import pickle, srvrmgrdIO, sys, time

osxServices = {
	'afp': ['currentConnections'],
	'calendar': [],
	'dhcp': ['numDHCPLeases', 'numConfiguredStaticMaps', 'timeOfSnapShot', 'numActiveStaticMaps'],
	'dirserv': ['timState', 'ldapdState', 'kdcStatus', 'lookupdState', 'passwordServiceState', 'netinfodState', 'netinfodParentState'],
	'dns': ['zonesAllocated', 'SOAQueriesInProgress', 'transfersRunning', 'transfersDeferred'],
	'ftp': ['realConnectionCount', 'anonymousAccessPermitted', 'anonymousConnectionCount'],
	'ipfilter': [],
	'jabber': ['serviceMode', 'jabberdState', 'mucState', 'proxyState'],
	'mysql': ['currentConnections', 'currentThroughput'],
	'nat': ['activeICMP', 'activeTCP', 'activeUDP'],
	'netboot': [],
	'nfs': ['nsfd', 'mountd', 'portmap', 'rpc.lockd'],
	'pcast': ['onlineCameras', 'totalCameras', 'currentJobs', 'totalJobs'],
	'print': ['currentJobs', 'currentQueues'],
	'qtss': ['stateAFP', 'stateDHCP', 'stateHTTP', 'stateNFS', 'stateTFTP'],
	'radius': [],
	'smb': ['currentConnections'],
	'swupdate': ['numOfMirroredPkg', 'numOfEnbabledPkg'],
	'teams': [],
	'vpn': [],
	'web': ['apacheState', 'proxyState', 'totalKBytes', 'totalRequests'],
	'webobjects': [],
	'xgrid': {'agentStatus': ['status', 'activeCPUPower'], 'controllerStatus': ['status', 'workingCPUPower']}
}

def convertListToCsv(pythonList, sqlMode=0):
        csvString = ''
        for listItem in pythonList:
                if csvString == '':
			if sqlMode:
				csvString = "'%s'" % listItem
			else:
				csvString = "%s" % listItem
                else:
			if sqlMode:
				csvString = "%s,'%s'" % (csvString, listItem)
			else:
				csvString = "%s,%s" % (csvString, listItem)
        return csvString

if len(sys.argv) >= 6:
	checkService = sys.argv[1]
	serverAddress = sys.argv[2]
	serverPort = sys.argv[3]
	serverUser = sys.argv[4]
	serverPassword = sys.argv[5]
else:
	print "OS X Server Monitoring Tool"
	print "\tCopyright (C) 2010 Felim Whiteley"
	print "\thttp://code.google.com/p/libsrvrmgrd-osx/"
	print "This software is licensed under the GNU Lesser General Public License\n"
	print "USAGE: check_osx_server SERVICENAME ADDRESS PORT USER PASSWORD [Optional Sub-Service Ignore List]"
	print "\t--------\t------------"
	print "\tServices\tSub-Services"
	print "\t--------\t------------"
	for serviceName, subServiceList in osxServices.iteritems():
		if len(serviceName) > 7:
			txtTabs = "\t"
		else:
			txtTabs = "\t\t"
		if isinstance(subServiceList, dict):
			print "\t%s%s%s" % (serviceName, txtTabs, convertListToCsv(subServiceList.keys()))
		elif len(subServiceList) == 0:
			noSubServices = "--NO SUB-SERVICES AVAILABLE--"
			print "\t%s%s%s" % (serviceName, txtTabs, noSubServices)
		else:
			print "\t%s%s%s" % (serviceName, txtTabs, convertListToCsv(subServiceList))
	print "\tsoftwareupdates\t--NO SUB-SERVICES AVAILABLE--"
	print "\nWhen adding Sub-Service ignore values they should be the last argument, seperated by commas and contain no whitespace"
	print "\nEXAMPLE: check_osx_server jabber 172.16.12.1 311 srvadmin srvpassword mucState,proxyState\n"
	print "\tmucState & proxyState will be ignored and will not trigger a warning\n"
	print "------------------"
	print "Informational Mode"
	print "------------------"
	print "USAGE: check_osx_server INFOMODE ADDRESS PORT USER PASSWORD"
	print "\nINFOMODES:"
	print "\tafpUserList\t\tView User(s) Connected Via AFP"
	print "\tsmbUserList\t\tView User(s) Connected Via SMB"
	print "\tserverRole\t\tList The Roles & Service Configured"
	print "\tsoftwareupdatesList\tList All Updates Required By The Server"
	print ""
	sys.exit(0)

# Ignore List For subServices
if len(sys.argv) > 6:
	subServiceIgnoreCSV = sys.argv[6]
	subServiceIgnore = subServiceIgnoreCSV.split(',')
else:
	subServiceIgnore = []

debugMode = 0
warningCount = 0
criticalCount = 0
unknownCount = 0

def getServiceData(servermgrdModule, dataReqCommand, dataReqVariant=None, dataReqTimescale=None, dataReqIdentifier=None, dataReqOffset=None, dataReqAmount=None):
	# buildXML ( command, variant=None, timescale=None, identifier=None, offset=None, amount=None )
	dataRequest = srvrmgrdIO.buildXML(dataReqCommand, dataReqVariant, dataReqTimescale, dataReqIdentifier, dataReqOffset, dataReqAmount)
	dataFileLocation = srvrmgrdIO.buildDataFile(servermgrdModule, dataRequest, serverAddress, serverPort, serverUser, serverPassword)
	dataFile = open(dataFileLocation, "rb")
	serviceData = pickle.load(dataFile)
	dataFile.close()
	return serviceData

def getServiceState(serviceData):
	# Set some intial values
	serviceStatus = ""
	criticalCount = 0
	serviceState = serviceData['state']
	if 'state' in serviceData:
		if serviceState == 'RUNNING':
			serviceStatus = "%s" % (serviceState)
		else :
				criticalCount += 1
				serviceStatus = "%s" % (serviceState)
	else:
		serviceStatus = "UNKNOWN: Invalid Data Returned From Service Check"
		criticalCount += 1
	return serviceStatus, criticalCount

def getSubServiceState(subServices, serviceData, subServiceIgnore):
	warningCount = 0
	subServiceStatus = ""
	# Some Services Use Sub-Arrays Within The PList - We need to had a Sub-SubService
	# Effectivly: This is rather ugly and should really change this!
	if isinstance(subServices, dict):
		for subServiceName, subServiceArray in subServices.iteritems():
			if subServiceName in serviceData:
				subServiceInfo = ''
				for subServiceItem in subServiceArray:
					if subServiceItem in serviceData[subServiceName].keys():
						subServiceState = serviceData[subServiceName][subServiceItem]
						if subServiceInfo == '':
							subServiceInfo = "[%s%s:%s " % (subServiceInfo, subServiceItem, serviceData[subServiceName][subServiceItem])
						else:
							subServiceInfo = "%s%s:%s " % (subServiceInfo, subServiceItem, serviceData[subServiceName][subServiceItem])
						if subServiceName not in subServiceIgnore:
							# Need to strip out possible float values - This is very hackish
							if not str(subServiceState).replace('.', '').isdigit():
								if subServiceState.upper() in ('UNAVAILABLE', 'STOPPED', 'OFF'):
									warningCount += 1
				if subServiceInfo != '':
					subServiceStatus = "%s%s:%s] " % (subServiceStatus, subServiceName, subServiceInfo.rstrip())
	# Normal Sub-Services
	else:
		for subService in subServices:
			if subService in serviceData:
				subServiceState = serviceData[subService]
				subServiceStatus = "%s%s:%s " % (subServiceStatus, subService, subServiceState)
				if subService not in subServiceIgnore:
					# Need to strip out possible float values - This is very hackish
					if not str(subServiceState).replace('.', '').isdigit():
						if subServiceState.upper() in ('STOPPED', 'OFF'):
							warningCount += 1
	return subServiceStatus, warningCount

# Process The Service
if checkService in ('afpUserList', 'smbUserList'):
	dataReqCommand = 'getConnectedUsers'
	# Strip First 3 Characters To Run Against Correct OSX Module
	serviceData = getServiceData('servermgr_%s' % (checkService[:3]), dataReqCommand, 'withDetails')
	serviceStatus, criticalCount = getServiceState(serviceData)
	if not criticalCount:
		userCount = 0
		userList = "%s Connections Active\n" % (checkService[:3].upper())
		for userConnection in serviceData['usersArray'] :
			userCount += 1
			userList = "%s\t%s:\t%s\n" % (userList, userConnection['ipAddress'], userConnection['name'])
		if userCount:
			print userList
		serviceStatus = "Connections:%s" % (userCount)
elif checkService == "mail":
	serviceData = getServiceData('servermgr_mail', 'getState', 'withDetails')
	serviceStatus, criticalCount = getServiceState(serviceData)
	if not criticalCount:
		serviceStatus = "%s " % (serviceStatus) # Keep Initial RUNNING
		# Example Of Data Returned
		# {'active': 0, 'status': 'OFF', 'kind': 'INCOMING', 'total': 0, 'protocol': 'SMTP'}
		# {'active': 0, 'status': 'OFF', 'kind': 'OUTGOING', 'total': 0, 'protocol': 'SMTP'}
		# {'active': 0, 'status': 'OFF', 'kind': 'INCOMING', 'total': 0, 'protocol': 'POP3'}
		# {'active': 0, 'status': 'OFF', 'kind': 'INCOMING', 'total': 0, 'protocol': 'IMAP'}
		# {'active': 0, 'status': 'OFF', 'kind': 'INCOMING', 'total': 0, 'protocol': 'LISTSERVER'}
		for protocol in serviceData['protocolsArray']:
			name = protocol['protocol']
			kind = protocol['kind']
			total = protocol['total']
			active = protocol['active']
			status = protocol['status']
			if status == 'ON' :
				serviceStatus = "%s%s-%s:Act(%s)Total(%s) " % (serviceStatus, name, kind, active, total)
			else :
				serviceStatus = "%s%s-%s:(%s) " % (serviceStatus, name, kind, status)
elif checkService in ("softwareupdates", "softwareupdatesList"):
	patchList = []
	serviceData = getServiceData('servermgr_info', 'getSWUpdateStatus')
	if 'swupdateStatus' in serviceData:
		if 'phaseResultsArray' in serviceData['swupdateStatus']:
			normalPatches = 0
			recommendedPatches = 0
			restartRequired = 0
			for softwareUpdate in serviceData['swupdateStatus']['phaseResultsArray']:
				if softwareUpdate['ignored']: # ie. Ignored Is True - Meaning Don't Ignore!
					normalPatches += 1
					warningCount += 1
				else:
					recommendedPatches += 1
					criticalCount += 1
				if softwareUpdate['restartRequired'] == 'YES':
					restartRequired += 1
				patchList.append({'swPatch': softwareUpdate['ignoreKey'], 'patchName': softwareUpdate['name'], 'sizeInKB': softwareUpdate['sizeInKB'], 'restartRequired':softwareUpdate['restartRequired'], 'productKey': softwareUpdate['productKey']})
		serviceStatus = "totalPatches:%s" % (normalPatches + recommendedPatches)
		if recommendedPatches:
			serviceStatus = "%s recommendedPatches:%s" % (serviceStatus, recommendedPatches)
		if restartRequired:
			serviceStatus = "%s restartRequired" % (serviceStatus)
		if checkService == 'softwareupdatesList':
			for swPatch in patchList:
				restartStatus = ""
				if swPatch['restartRequired'] == 'YES':
					restartStatus = " : [RESTART]"
				print "%s : %skB : [%s]%s" % (swPatch['swPatch'], swPatch['sizeInKB'], swPatch['productKey'], restartStatus)
	else:
		unknownCount += 1
elif checkService == "serverRole":
	serviceData = getServiceData('servermgr_info', 'getState', 'withDetails')
	if 'serviceConfig' in serviceData:
		if 'roles' in serviceData['serviceConfig']:
			serviceStatus = "Server Role(s):\n"
			for serverRole, serverRoleStatus in serviceData['serviceConfig']['roles'].iteritems():
				if serverRoleStatus['configured']:
					serviceStatus = "%s\t%s\n" % (serviceStatus, serverRole)
		if 'services' in serviceData['serviceConfig']:
			serviceStatus = "%sActive Services:\n" % (serviceStatus)
			for serviceName, serviceNameStatus in serviceData['serviceConfig']['services'].iteritems():
				if serviceNameStatus['configured']:
					serviceStatus = "%s\t%s\n" % (serviceStatus, serviceName)
	serviceStatus.rstrip('\n')
elif checkService in osxServices:
	serviceData = getServiceData('servermgr_%s' % checkService, 'getState', 'withDetails')
	serviceStatus, criticalCount = getServiceState(serviceData)
	subServices = osxServices[checkService]
	if not criticalCount:
		# Not All Services Have Sub-Services
		if len(subServices) > 0:
			subServiceStatus, warningCount = getSubServiceState(subServices, serviceData, subServiceIgnore)
			# Some services have sub-services that are not always there
			# if they are there then return the sub-services-status instead
			if subServiceStatus not in (None, ''):
				serviceStatus = subServiceStatus
else:
	unknownCount = 1
	serviceStatus = "ERROR:Unknown command '%s'" % (checkService)

# If In Debug Mode Print Out The Returned Dictionary So Can Check Values etc.
if debugMode:
	print serviceData
# End Checks Print Status Message And Exit With Correct Exit Code
# Nagios Return Codes
# 0 - OK
# 1 - Warning
# 2 - Critical
# 3 - Unknown (Invalid command line arguments were supplied to the plugin or
#              low-level failures internal to the plugin (such as unable to
#              fork, or open a tcp socket) that prevent it from performing the
#              specified operation. Higher-level errors (such as name resolution
#              errors, socket timeouts, etc) are outside of the control of
#              plugins and should generally NOT be reported as UNKNOWN states.)
print serviceStatus
if unknownCount:
        sys.exit(3)
elif criticalCount:
        sys.exit(2)
elif warningCount:
	sys.exit(1)
else :
        sys.exit(0)
